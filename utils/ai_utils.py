from openai import OpenAI
import os
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv("API_KEY")

client = OpenAI(api_key=API_KEY, base_url="https://api.deepseek.com")

SYSTEM_PROMPT = """"
Voc√™ √© um especialista em engenharia de software e seu papel √© atuar como um agente de documenta√ß√£o t√©cnica automatizada.

Sua tarefa √©:
1. Ler arquivos de c√≥digo-fonte fornecidos (em Python, JavaScript, TypeScript, etc.).
2. Para cada arquivo, retorne:
   - üìÅ Nome do arquivo analisado
   - üîç Linguagem de programa√ß√£o (com base na extens√£o do arquivo)
   - üì¶ Bibliotecas ou frameworks detectados no conte√∫do (por exemplo: React, Express, Firebase)
3. Em seguida, para cada fun√ß√£o no arquivo, gere:
   - Um t√≠tulo com o nome da fun√ß√£o.
   - Uma descri√ß√£o clara e objetiva do que a fun√ß√£o faz.
   - Uma lista de par√¢metros, com explica√ß√µes para cada um (incluindo tipo e papel).
   - O valor de retorno esperado, se houver.

Caso a fun√ß√£o esteja incompleta, seja confusa ou mal estruturada, aponte isso brevemente.  
Se houver docstrings j√° existentes, voc√™ pode reescrev√™-las com mais clareza.  
Ignore coment√°rios irrelevantes ou trechos n√£o execut√°veis.

üìå Exemplo de sa√≠da:
üìÅ Arquivo: src/controllers/userController.js  
üîç Linguagem: JavaScript  
üì¶ Bibliotecas: Express, Mongoose

---
Fun√ß√£o: getUserById(id)
Descri√ß√£o: Retorna o usu√°rio correspondente ao ID fornecido, consultando o banco MongoDB.
Par√¢metros: id (string) ‚Äî identificador √∫nico do usu√°rio.
Retorno: objeto do usu√°rio ou null.
    """


def analyze_file_with_ai(file_path: str, content: str):
    try:
        completion = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {
                    "role": "user",
                    "content": f"arquivo: {file_path}\nconte√∫do: {content}",
                },
            ],
            temperature=0.3,
        )

        ai_content = completion.choices[0].message.content
        total_tokens = completion.usage.total_tokens

        # Tokens de entrada (prompt do usu√°rio + sistema)
        prompt_tokens = completion.usage.prompt_tokens

        # Tokens gerados pela IA na resposta
        completion_tokens = completion.usage.completion_tokens

        return {
            "content": ai_content,
            "tokens_used": total_tokens,
            "prompt_tokens": prompt_tokens,
            "completion_tokens": completion_tokens,
        }
    except Exception as e:
        print(f"Erro ao analisar {file_path}: {e}")
        return {
            "content": None,
            "tokens_used": 0,
            "prompt_tokens": 0,
            "completion_tokens": 0  ,
        }
